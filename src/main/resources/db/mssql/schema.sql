IF OBJECT_ID('dbo.BOOK', 'U') IS NOT NULL
    DROP TABLE dbo.BOOK;
GO

CREATE TABLE dbo.BOOK (
    ID BIGINT IDENTITY(1,1) PRIMARY KEY,
    TITLE NVARCHAR(255) NOT NULL,
    AUTHOR NVARCHAR(255) NOT NULL,
    PRICE DECIMAL(12,2) NULL,
    PUBLISHED_DATE DATE NULL,
    ISBN NVARCHAR(32) NULL
    /* -- CỘT MỚI -- */
    TOTAL_COPIES INT NOT NULL DEFAULT 1,
    AVAILABLE_COPIES INT NOT NULL DEFAULT 1
);
GO

CREATE INDEX IX_BOOK_TITLE ON dbo.BOOK (TITLE);
CREATE INDEX IX_BOOK_AUTHOR ON dbo.BOOK (AUTHOR);
CREATE INDEX IX_BOOK_ISBN ON dbo.BOOK (ISBN);
GO


-- Members (library users)
IF OBJECT_ID('dbo.MEMBER', 'U') IS NOT NULL
    DROP TABLE dbo.MEMBER;
GO
CREATE TABLE dbo.MEMBER (
    ID BIGINT IDENTITY(1,1) PRIMARY KEY,
    CODE NVARCHAR(64) NOT NULL UNIQUE,
    NAME NVARCHAR(255) NOT NULL,
    EMAIL NVARCHAR(255) NULL
    /* -- CỘT MỚI -- */
    STATUS NVARCHAR(20) NOT NULL DEFAULT 'ACTIVE', /* Ví dụ: ACTIVE, SUSPENDED */
    MAX_LOAN_LIMIT INT NOT NULL DEFAULT 5 /* Giới hạn số sách được mượn cùng lúc */
);
GO

-- Loans (borrow/return)
IF OBJECT_ID('dbo.LOAN', 'U') IS NOT NULL
    DROP TABLE dbo.LOAN;
GO
CREATE TABLE dbo.LOAN (
    ID BIGINT IDENTITY(1,1) PRIMARY KEY,
    BOOK_ID BIGINT NOT NULL,
    MEMBER_ID BIGINT NOT NULL,
    BORROWED_AT DATETIME2 NOT NULL,
    DUE_AT DATETIME2 NOT NULL,
    RETURNED_AT DATETIME2 NULL,
    STATUS NVARCHAR(32) NOT NULL DEFAULT 'BORROWED',
    CONSTRAINT FK_LOAN_BOOK FOREIGN KEY (BOOK_ID) REFERENCES dbo.BOOK(ID),
    CONSTRAINT FK_LOAN_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES dbo.MEMBER(ID)
);
GO
CREATE INDEX IX_LOAN_MEMBER ON dbo.LOAN (MEMBER_ID);
CREATE INDEX IX_LOAN_BOOK ON dbo.LOAN (BOOK_ID);
CREATE INDEX IX_LOAN_STATUS ON dbo.LOAN (STATUS);
GO

/* --- 3. THÊM BẢNG RESERVATION MỚI --- */
IF OBJECT_ID('dbo.RESERVATION', 'U') IS NOT NULL
    DROP TABLE dbo.RESERVATION;
GO
CREATE TABLE dbo.RESERVATION (
    ID BIGINT IDENTITY(1,1) PRIMARY KEY,
    BOOK_ID BIGINT NOT NULL,
    MEMBER_ID BIGINT NOT NULL,
    REQUESTED_AT DATETIME2 NOT NULL DEFAULT SYSDATETIME(),
    STATUS NVARCHAR(20) NOT NULL DEFAULT 'PENDING', /* PENDING, FULFILLED, CANCELLED */
    
    CONSTRAINT FK_RESERVATION_BOOK FOREIGN KEY (BOOK_ID) REFERENCES dbo.BOOK(ID),
    CONSTRAINT FK_RESERVATION_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES dbo.MEMBER(ID)
);
GO
/* Index để tìm hàng chờ nhanh */
CREATE INDEX IX_RESERVATION_QUEUE ON dbo.RESERVATION (BOOK_ID, STATUS, REQUESTED_AT);
/* Đảm bảo một người không đặt 2 lần cho cùng 1 sách (khi đang PENDING) */
CREATE UNIQUE INDEX UX_RESERVATION_UNIQUE_PENDING ON dbo.RESERVATION(BOOK_ID, MEMBER_ID) WHERE STATUS = 'PENDING';
GO

-- Notifications (pending emails for overdue loans)
IF OBJECT_ID('dbo.NOTIFICATION', 'U') IS NOT NULL
    DROP TABLE dbo.NOTIFICATION;
GO
CREATE TABLE dbo.NOTIFICATION (
    PROCESS_ID NVARCHAR(64) NULL,
    RETRY_COUNT INT NOT NULL DEFAULT 0,
    LOCKED_AT DATETIME2 NULL,
    TIMEOUT_SEC INT NOT NULL DEFAULT 300,
    LAST_ERROR NVARCHAR(1000) NULL,
    LAST_ATTEMPT_AT DATETIME2 NULL,
    
    ID BIGINT IDENTITY(1,1) PRIMARY KEY,
    LOAN_ID BIGINT NOT NULL,
    MEMBER_ID BIGINT NOT NULL,
    EMAIL NVARCHAR(255) NOT NULL,
    SUBJECT NVARCHAR(255) NOT NULL,
    CONTENT NVARCHAR(MAX) NOT NULL,
    CREATED_AT DATETIME2 NOT NULL DEFAULT SYSDATETIME(),
    CONSTRAINT FK_NOTIFICATION_LOAN FOREIGN KEY (LOAN_ID) REFERENCES dbo.LOAN(ID),
    CONSTRAINT FK_NOTIFICATION_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES dbo.MEMBER(ID)
);
GO
CREATE UNIQUE INDEX UX_NOTIFICATION_UNIQUE_LOAN ON dbo.NOTIFICATION(LOAN_ID);
GO

-- Notification history (archived sent notifications)
IF OBJECT_ID('dbo.NOTIFICATION_HISTORY', 'U') IS NOT NULL
    DROP TABLE dbo.NOTIFICATION_HISTORY;
GO
CREATE TABLE dbo.NOTIFICATION_HISTORY (
    ID BIGINT IDENTITY(1,1) PRIMARY KEY,
    LOAN_ID BIGINT NOT NULL,
    MEMBER_ID BIGINT NOT NULL,
    EMAIL NVARCHAR(255) NOT NULL,
    SUBJECT NVARCHAR(255) NOT NULL,
    CONTENT NVARCHAR(MAX) NOT NULL,
    SENT_AT DATETIME2 NOT NULL DEFAULT SYSDATETIME(),
    SUCCESS BIT NOT NULL,
    ERROR_MSG NVARCHAR(1000) NULL
);
GO

GO
CREATE INDEX IX_NOTIFICATION_PROCESS ON dbo.NOTIFICATION (PROCESS_ID);
CREATE INDEX IX_NOTIFICATION_LOCK ON dbo.NOTIFICATION (LOCKED_AT);
CREATE INDEX IX_NOTIFICATION_RETRY ON dbo.NOTIFICATION (RETRY_COUNT);
GO
