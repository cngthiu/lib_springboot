/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Dbo;
import com.example.jooq.Keys;
import com.example.jooq.tables.records.NotificationHistoryRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationHistory extends TableImpl<NotificationHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dbo.NOTIFICATION_HISTORY</code>
     */
    public static final NotificationHistory NOTIFICATION_HISTORY = new NotificationHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationHistoryRecord> getRecordType() {
        return NotificationHistoryRecord.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<NotificationHistoryRecord, Object> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.OTHER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.LOAN_ID</code>.
     */
    public final TableField<NotificationHistoryRecord, Long> LOAN_ID = createField(DSL.name("LOAN_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.MEMBER_ID</code>.
     */
    public final TableField<NotificationHistoryRecord, Long> MEMBER_ID = createField(DSL.name("MEMBER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.EMAIL</code>.
     */
    public final TableField<NotificationHistoryRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.NVARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.SUBJECT</code>.
     */
    public final TableField<NotificationHistoryRecord, String> SUBJECT = createField(DSL.name("SUBJECT"), SQLDataType.NVARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.CONTENT</code>.
     */
    public final TableField<NotificationHistoryRecord, String> CONTENT = createField(DSL.name("CONTENT"), SQLDataType.NVARCHAR(2147483647).nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<NotificationHistoryRecord, Object> SENT_AT = createField(DSL.name("SENT_AT"), org.jooq.impl.SQLDataType.OTHER.nullable(false).defaultValue(DSL.field(DSL.raw("'(sysdatetime())'"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.SUCCESS</code>.
     */
    public final TableField<NotificationHistoryRecord, Boolean> SUCCESS = createField(DSL.name("SUCCESS"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>dbo.NOTIFICATION_HISTORY.ERROR_MSG</code>.
     */
    public final TableField<NotificationHistoryRecord, String> ERROR_MSG = createField(DSL.name("ERROR_MSG"), SQLDataType.NVARCHAR(1000), this, "");

    private NotificationHistory(Name alias, Table<NotificationHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationHistory(Name alias, Table<NotificationHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>dbo.NOTIFICATION_HISTORY</code> table reference
     */
    public NotificationHistory(String alias) {
        this(DSL.name(alias), NOTIFICATION_HISTORY);
    }

    /**
     * Create an aliased <code>dbo.NOTIFICATION_HISTORY</code> table reference
     */
    public NotificationHistory(Name alias) {
        this(alias, NOTIFICATION_HISTORY);
    }

    /**
     * Create a <code>dbo.NOTIFICATION_HISTORY</code> table reference
     */
    public NotificationHistory() {
        this(DSL.name("NOTIFICATION_HISTORY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Dbo.DBO;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    public Identity<NotificationHistoryRecord, Object> getIdentity() {
        return (Identity<NotificationHistoryRecord, Object>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationHistoryRecord> getPrimaryKey() {
        return Keys.PK_NOTIFICATION_HISTORY;
    }

    @Override
    public NotificationHistory as(String alias) {
        return new NotificationHistory(DSL.name(alias), this);
    }

    @Override
    public NotificationHistory as(Name alias) {
        return new NotificationHistory(alias, this);
    }

    @Override
    public NotificationHistory as(Table<?> alias) {
        return new NotificationHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationHistory rename(String name) {
        return new NotificationHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationHistory rename(Name name) {
        return new NotificationHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationHistory rename(Table<?> name) {
        return new NotificationHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationHistory where(Condition condition) {
        return new NotificationHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
